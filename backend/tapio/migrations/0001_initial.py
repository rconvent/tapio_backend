# Generated by Django 4.1 on 2023-03-23 20:04

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import project.mixin
import tapio.models.userProfile
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            bases=(project.mixin.ModelSignals, models.Model),
            managers=[
                ('objects', tapio.models.userProfile.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('tva_number', models.CharField(blank=True, max_length=256, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=256, null=True)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='tapio.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('names', models.JSONField(blank=True, default=dict, help_text="names of this object in the form of a dictionnary, i.e. {'fr':'Nom', 'en':'Name'}")),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='profile', serialize=False, to=settings.AUTH_USER_MODEL)),
                ('language', models.CharField(choices=[('fr', 'french'), ('en', 'english'), ('nl', 'dutch')], db_index=True, default='fr', max_length=2)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='tapio.company')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('names', models.JSONField(blank=True, default=dict, help_text="names of this object in the form of a dictionnary, i.e. {'fr':'Nom', 'en':'Name'}")),
                ('description', models.CharField(blank=True, max_length=250, null=True)),
                ('value', models.FloatField(blank=True, help_text='quantity of source in Unit', null=True)),
                ('emission_factor', models.FloatField(blank=True, help_text='emission of the source in Unit/kgCO2e', null=True)),
                ('total_emission', models.FloatField(blank=True, editable=False, help_text='Total emission in kgCO2e', null=True)),
                ('lifetime', models.PositiveIntegerField(blank=True, null=True)),
                ('acquisition_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('company', models.ForeignKey(help_text='Company to which this source belong to', on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='tapio.company')),
                ('unit', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sources', to='tapio.unit')),
            ],
            bases=(project.mixin.ModelSignals, models.Model),
        ),
        migrations.CreateModel(
            name='ReductionStrategy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('names', models.JSONField(blank=True, default=dict, help_text="names of this object in the form of a dictionnary, i.e. {'fr':'Nom', 'en':'Name'}")),
                ('source', models.ForeignKey(help_text='source of the strategy', on_delete=django.db.models.deletion.CASCADE, related_name='reduction_stategies', to='tapio.source')),
            ],
            bases=(project.mixin.ModelSignals, models.Model),
        ),
        migrations.CreateModel(
            name='Modification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ratio', models.FloatField(blank=True, default=1, help_text='Ratio to apply to the source')),
                ('emission_factor', models.FloatField(blank=True, help_text='Modified emission factor for the source', null=True)),
                ('effective_year', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('reduction_strategy', models.ForeignKey(help_text="linked reduction strategy of the modification", on_delete=models.CASCADE, null=False, related_name="modifications", to="tapio.reductionstrategy"))
            ],
            bases=(project.mixin.ModelSignals, models.Model),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('names', models.JSONField(blank=True, default=dict, help_text="names of this object in the form of a dictionnary, i.e. {'fr':'Nom', 'en':'Name'}")),
                ('date', models.DateField()),
                ('year', models.PositiveSmallIntegerField(blank=True, help_text='Carbon footprint report year', null=True)),
                ('deltas', models.JSONField(default=dict, editable=False, help_text="delta and total emission by scenarios {'1' : {'initial' = 100, 'modified' = 50, 'delta'= 50}, '2' : {...} ")),
            ],
            bases=(project.mixin.ModelSignals, models.Model),
        ),
        migrations.CreateModel(
            name='ReportEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scenario', models.CharField(default="00", max_length=10, help_text='scenario of this entry "00", "01",...')),
                ('reduction_strategy', models.ForeignKey(help_text='modfied source of this entry', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='report_entries', to='tapio.reductionstrategy')),
                ('report', models.ForeignKey(help_text='Report link sof this entry', on_delete=django.db.models.deletion.CASCADE, related_name='report_entries', to='tapio.report')),
            ],
            bases=(project.mixin.ModelSignals, models.Model),
        ),
        migrations.AlterUniqueTogether(
            name="reportentry",
            unique_together={("reduction_strategy", "scenario", "report")},
        ),
    ]
